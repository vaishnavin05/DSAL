#include <iostream>
#include <string.h>
using namespace std;

struct node {
    char data;
    node *left;
    node *right;
};

class stack {
    node *data[30];
    int top;

public:
    stack() {
        top = -1;
    }

    void push(node *p) {
        data[++top] = p;
    }

    node *pop() {
        return data[top--];
    }

    bool isempty() {
        return top == -1;
    }
};

class tree {
public:
    node *top;

    void expression(char prefix[]);
    void non_rec_postorder(node *top);
    void del(node *node);
};

void tree::expression(char prefix[]) {
    stack s;
    int len = strlen(prefix);

    for (int i = len - 1; i >= 0; i--) {
        node *newNode = new node;
        newNode->data = prefix[i];
        newNode->left = newNode->right = NULL;

        if (isalpha(prefix[i])) {
            s.push(newNode);
        } else {
            newNode->left = s.pop();
            newNode->right = s.pop();
            s.push(newNode);  // push operator node back to stack
        }
    }

    top = s.pop();
}

void tree::non_rec_postorder(node *top) {
    stack s1, s2;
    s1.push(top);

    while (!s1.isempty()) {
        node *temp = s1.pop();
        s2.push(temp);

        if (temp->left)
            s1.push(temp->left);
        if (temp->right)
            s1.push(temp->right);
    }

    while (!s2.isempty()) {
        cout << s2.pop()->data << " ";
    }

    cout << endl;
}

void tree::del(node *node) {
    if (node == NULL)
        return;

    del(node->left);
    del(node->right);

    cout << "Deleting Node " << node->data << endl;
    delete node;
}

int main() {
    tree t;
    char expr[] = "+--a*bc/def";

    cout << "Building Tree for Prefix Expression: " << expr << endl;
    t.expression(expr);

    cout << "\nPostorder Traversal (non-recursive): ";
    t.non_rec_postorder(t.top);

    cout << "\nDeleting Tree:\n";
    t.del(t.top);

    return 0;
}
